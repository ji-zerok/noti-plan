from flask import Flask, render_template, request, jsonify, session, redirect, url_for
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime, date
from sqlalchemy import func

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///noti_plan.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SECRET_KEY'] = 'noti_plan_secret_key_2848'
db = SQLAlchemy(app)

ADMIN_PASSWORD = '2848'

# 모델 정의
class Organization(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    services = db.relationship('Service', backref='organization', lazy=True)
    quotas = db.relationship('MonthlyQuota', backref='organization', lazy=True)

class Service(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'), nullable=False)
    manager_name = db.Column(db.String(100))
    requests = db.relationship('SendRequest', backref='service', lazy=True)

class MonthlyQuota(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    organization_id = db.Column(db.Integer, db.ForeignKey('organization.id'), nullable=False)
    year_month = db.Column(db.String(7), nullable=False)  # YYYY-MM
    channel = db.Column(db.String(20), nullable=False, default='naver')  # naver, payco, talktalk
    total_quota = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    __table_args__ = (db.UniqueConstraint('organization_id', 'year_month', 'channel'),)

class SendRequest(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    service_id = db.Column(db.Integer, db.ForeignKey('service.id'), nullable=False)
    send_date = db.Column(db.Date, nullable=False)
    channel = db.Column(db.String(20), nullable=False, default='naver')  # naver, payco, talktalk
    quantity = db.Column(db.Integer, nullable=False)
    status = db.Column(db.String(20), default='pending')  # pending, approved, rejected
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

# 관리자 로그인 페이지
@app.route('/')
@app.route('/admin/login')
def admin_login():
    return render_template('admin_login.html')

# 관리자 로그인 처리
@app.route('/api/admin/login', methods=['POST'])
def admin_login_process():
    data = request.json
    password = data.get('password')

    if password == ADMIN_PASSWORD:
        session['admin_logged_in'] = True
        return jsonify({'success': True})
    else:
        return jsonify({'success': False, 'message': '비밀번호가 올바르지 않습니다.'}), 401

# 관리자 로그아웃
@app.route('/admin/logout')
def admin_logout():
    session.pop('admin_logged_in', None)
    return redirect(url_for('admin_login'))

# 관리자 화면 - 조직별 물량 설정
@app.route('/admin')
def admin_page():
    if not session.get('admin_logged_in'):
        return redirect(url_for('admin_login'))
    organizations = Organization.query.all()
    return render_template('admin.html', organizations=organizations)

# 서비스 담당자 화면 - 물량 신청
@app.route('/request')
def request_page():
    organizations = Organization.query.all()
    return render_template('request.html', organizations=organizations)

# 달력 화면 - 물량 현황
@app.route('/calendar')
def calendar_page():
    organizations = Organization.query.all()
    return render_template('calendar.html', organizations=organizations)

# API: 조직별 월간 물량 설정
@app.route('/api/quota', methods=['POST'])
def set_quota():
    data = request.json
    organization_id = data.get('organization_id')
    year_month = data.get('year_month')
    channel = data.get('channel', 'naver')
    total_quota = data.get('total_quota')

    quota = MonthlyQuota.query.filter_by(
        organization_id=organization_id,
        year_month=year_month,
        channel=channel
    ).first()

    if quota:
        quota.total_quota = total_quota
    else:
        quota = MonthlyQuota(
            organization_id=organization_id,
            year_month=year_month,
            channel=channel,
            total_quota=total_quota
        )
        db.session.add(quota)

    db.session.commit()
    return jsonify({'success': True, 'message': '물량이 설정되었습니다.'})

# API: 조직별 월간 물량 조회
@app.route('/api/quota/<int:org_id>/<year_month>')
def get_quota(org_id, year_month):
    quota = MonthlyQuota.query.filter_by(
        organization_id=org_id,
        year_month=year_month
    ).first()

    if quota:
        return jsonify({
            'total_quota': quota.total_quota
        })
    return jsonify({'total_quota': 0})

# API: 전체 물량 목록 조회
@app.route('/api/quotas')
def get_all_quotas():
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    year_month = request.args.get('year_month')
    channel = request.args.get('channel')

    query = db.session.query(
        MonthlyQuota,
        Organization.name
    ).join(Organization)

    if year_month:
        query = query.filter(MonthlyQuota.year_month == year_month)

    if channel:
        query = query.filter(MonthlyQuota.channel == channel)

    quotas = query.order_by(MonthlyQuota.year_month.desc(), MonthlyQuota.channel, Organization.name).all()

    return jsonify([{
        'id': quota.id,
        'organization_name': org_name,
        'organization_id': quota.organization_id,
        'year_month': quota.year_month,
        'channel': quota.channel,
        'total_quota': quota.total_quota,
        'created_at': quota.created_at.strftime('%Y-%m-%d %H:%M')
    } for quota, org_name in quotas])

# API: 물량 수정
@app.route('/api/quota/<int:quota_id>', methods=['PUT'])
def update_quota(quota_id):
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    data = request.json
    new_quota = data.get('total_quota')

    quota = MonthlyQuota.query.get(quota_id)
    if not quota:
        return jsonify({'success': False, 'message': '물량을 찾을 수 없습니다.'}), 404

    quota.total_quota = new_quota
    db.session.commit()

    return jsonify({'success': True, 'message': '물량이 수정되었습니다.'})

# API: 물량 삭제
@app.route('/api/quota/<int:quota_id>', methods=['DELETE'])
def delete_quota(quota_id):
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    quota = MonthlyQuota.query.get(quota_id)
    if not quota:
        return jsonify({'success': False, 'message': '물량을 찾을 수 없습니다.'}), 404

    db.session.delete(quota)
    db.session.commit()

    return jsonify({'success': True, 'message': '물량이 삭제되었습니다.'})

# API: 특정 월의 전체 물량 복사
@app.route('/api/quotas/copy', methods=['POST'])
def copy_quotas():
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    data = request.json
    source_year_month = data.get('source_year_month')
    target_year_month = data.get('target_year_month')

    if not source_year_month or not target_year_month:
        return jsonify({'success': False, 'message': '원본 월과 대상 월을 선택해주세요.'}), 400

    if source_year_month == target_year_month:
        return jsonify({'success': False, 'message': '원본 월과 대상 월이 같을 수 없습니다.'}), 400

    # 원본 월의 물량 조회
    source_quotas = MonthlyQuota.query.filter_by(year_month=source_year_month).all()

    if not source_quotas:
        return jsonify({'success': False, 'message': '원본 월에 설정된 물량이 없습니다.'}), 404

    # 대상 월에 이미 존재하는 물량 확인
    existing_quotas = MonthlyQuota.query.filter_by(year_month=target_year_month).all()
    existing_org_ids = {q.organization_id for q in existing_quotas}

    copied_count = 0
    skipped_count = 0

    for source_quota in source_quotas:
        if source_quota.organization_id in existing_org_ids:
            skipped_count += 1
            continue

        new_quota = MonthlyQuota(
            organization_id=source_quota.organization_id,
            year_month=target_year_month,
            total_quota=source_quota.total_quota
        )
        db.session.add(new_quota)
        copied_count += 1

    db.session.commit()

    message = f'{copied_count}개 조직의 물량이 복사되었습니다.'
    if skipped_count > 0:
        message += f' ({skipped_count}개 조직은 이미 존재하여 건너뜀)'

    return jsonify({'success': True, 'message': message, 'copied_count': copied_count, 'skipped_count': skipped_count})

# API: 조직 추가
@app.route('/api/organization', methods=['POST'])
def add_organization():
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    data = request.json
    name = data.get('name')

    if not name:
        return jsonify({'success': False, 'message': '조직명을 입력하세요.'}), 400

    # 중복 체크
    existing = Organization.query.filter_by(name=name).first()
    if existing:
        return jsonify({'success': False, 'message': '이미 존재하는 조직명입니다.'}), 400

    org = Organization(name=name)
    db.session.add(org)
    db.session.commit()

    return jsonify({'success': True, 'message': '조직이 추가되었습니다.', 'id': org.id})

# API: 서비스 추가
@app.route('/api/service', methods=['POST'])
def add_service():
    if not session.get('admin_logged_in'):
        return jsonify({'success': False, 'message': '권한이 없습니다.'}), 403

    data = request.json
    name = data.get('name')
    organization_id = data.get('organization_id')
    manager_name = data.get('manager_name', '')

    if not name or not organization_id:
        return jsonify({'success': False, 'message': '필수 항목을 입력하세요.'}), 400

    service = Service(name=name, organization_id=organization_id, manager_name=manager_name)
    db.session.add(service)
    db.session.commit()

    return jsonify({'success': True, 'message': '서비스가 추가되었습니다.', 'id': service.id})

# API: 조직의 서비스 목록 조회
@app.route('/api/services/<int:org_id>')
def get_services(org_id):
    services = Service.query.filter_by(organization_id=org_id).all()
    return jsonify([{
        'id': s.id,
        'name': s.name,
        'manager_name': s.manager_name
    } for s in services])

# API: 모든 서비스 목록 조회
@app.route('/api/services')
def get_all_services():
    services = Service.query.join(Organization).all()
    return jsonify([{
        'id': s.id,
        'name': s.name,
        'organization_name': s.organization.name,
        'manager_name': s.manager_name
    } for s in services])

# API: 물량 신청
@app.route('/api/request', methods=['POST'])
def create_request():
    data = request.json
    service_id = data.get('service_id')
    send_date = datetime.strptime(data.get('send_date'), '%Y-%m-%d').date()
    quantity = data.get('quantity')

    # 해당 월의 조직별 총 물량 확인
    service = Service.query.get(service_id)
    year_month = send_date.strftime('%Y-%m')

    quota = MonthlyQuota.query.filter_by(
        organization_id=service.organization_id,
        year_month=year_month
    ).first()

    if not quota:
        return jsonify({'success': False, 'message': '해당 월의 물량이 설정되지 않았습니다.'}), 400

    # 해당 월의 조직 전체 신청 물량 계산
    month_start = datetime.strptime(year_month + '-01', '%Y-%m-%d').date()
    if send_date.month == 12:
        month_end = datetime.strptime(f'{send_date.year + 1}-01-01', '%Y-%m-%d').date()
    else:
        month_end = datetime.strptime(f'{send_date.year}-{send_date.month + 1:02d}-01', '%Y-%m-%d').date()

    total_requested = db.session.query(func.sum(SendRequest.quantity)).join(Service).filter(
        Service.organization_id == service.organization_id,
        SendRequest.send_date >= month_start,
        SendRequest.send_date < month_end
    ).scalar() or 0

    if total_requested + quantity > quota.total_quota:
        remaining = quota.total_quota - total_requested
        return jsonify({
            'success': False,
            'message': f'조직 물량을 초과합니다. 남은 물량: {remaining:,}건'
        }), 400

    send_request = SendRequest(
        service_id=service_id,
        send_date=send_date,
        quantity=quantity
    )
    db.session.add(send_request)
    db.session.commit()

    return jsonify({'success': True, 'message': '물량이 신청되었습니다.'})

# API: 달력용 물량 현황 조회 (조직별)
@app.route('/api/calendar/<int:org_id>/<year_month>')
def get_calendar_data(org_id, year_month):
    month_start = datetime.strptime(year_month + '-01', '%Y-%m-%d').date()
    year = int(year_month.split('-')[0])
    month = int(year_month.split('-')[1])

    if month == 12:
        month_end = date(year + 1, 1, 1)
    else:
        month_end = date(year, month + 1, 1)

    requests = db.session.query(
        SendRequest.send_date,
        Service.name,
        SendRequest.quantity
    ).join(Service).filter(
        Service.organization_id == org_id,
        SendRequest.send_date >= month_start,
        SendRequest.send_date < month_end
    ).all()

    calendar_data = {}
    for req in requests:
        date_str = req.send_date.strftime('%Y-%m-%d')
        if date_str not in calendar_data:
            calendar_data[date_str] = []
        calendar_data[date_str].append({
            'service': req.name,
            'quantity': req.quantity
        })

    # 조직 물량 정보
    quota = MonthlyQuota.query.filter_by(
        organization_id=org_id,
        year_month=year_month
    ).first()

    total_requested = sum(req.quantity for req in requests)

    return jsonify({
        'calendar_data': calendar_data,
        'total_quota': quota.total_quota if quota else 0,
        'total_requested': total_requested,
        'remaining': (quota.total_quota if quota else 0) - total_requested
    })

# API: 달력용 물량 현황 조회 (서비스별)
@app.route('/api/calendar/service/<int:service_id>/<year_month>')
def get_calendar_data_by_service(service_id, year_month):
    month_start = datetime.strptime(year_month + '-01', '%Y-%m-%d').date()
    year = int(year_month.split('-')[0])
    month = int(year_month.split('-')[1])

    if month == 12:
        month_end = date(year + 1, 1, 1)
    else:
        month_end = date(year, month + 1, 1)

    service = Service.query.get(service_id)
    if not service:
        return jsonify({'error': '서비스를 찾을 수 없습니다.'}), 404

    requests = db.session.query(
        SendRequest.send_date,
        Service.name,
        SendRequest.quantity
    ).join(Service).filter(
        SendRequest.service_id == service_id,
        SendRequest.send_date >= month_start,
        SendRequest.send_date < month_end
    ).all()

    calendar_data = {}
    for req in requests:
        date_str = req.send_date.strftime('%Y-%m-%d')
        if date_str not in calendar_data:
            calendar_data[date_str] = []
        calendar_data[date_str].append({
            'service': req.name,
            'quantity': req.quantity
        })

    # 해당 서비스의 조직 물량 정보
    quota = MonthlyQuota.query.filter_by(
        organization_id=service.organization_id,
        year_month=year_month
    ).first()

    total_requested = sum(req.quantity for req in requests)

    return jsonify({
        'calendar_data': calendar_data,
        'total_quota': quota.total_quota if quota else 0,
        'total_requested': total_requested,
        'remaining': (quota.total_quota if quota else 0) - total_requested
    })

# 초기 데이터 생성
@app.route('/init')
def init_data():
    db.drop_all()
    db.create_all()

    # 샘플 조직 및 서비스 생성
    org_loan = Organization(name='대출')
    org_card = Organization(name='카드')

    db.session.add_all([org_loan, org_card])
    db.session.commit()

    services = [
        Service(name='신용대출', organization_id=org_loan.id, manager_name='김철수'),
        Service(name='주택담보대출', organization_id=org_loan.id, manager_name='이영희'),
        Service(name='신용점수', organization_id=org_loan.id, manager_name='박민수'),
        Service(name='신용카드', organization_id=org_card.id, manager_name='최지은'),
        Service(name='체크카드', organization_id=org_card.id, manager_name='정수진'),
    ]
    db.session.add_all(services)
    db.session.commit()

    return jsonify({'success': True, 'message': '초기 데이터가 생성되었습니다.'})

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    app.run(debug=True, port=5000)